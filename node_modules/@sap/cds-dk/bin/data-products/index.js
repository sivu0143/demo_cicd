const { getDataProductCsnFromLocalRepo } = require ('./get-csn.js')
const { getDataProductCsnViaDpCli } = require ('./get-csn-via-dp-cli.js')
const { prepareCsn } = require ('./prepare-csn.js')
const fs = require ('node:fs/promises')
const path = require ('node:path')

exports.load_data_product  = async function (sources, o) {
  let service = /\/([^/]+)\//.exec(o.services)?.[1].replaceAll('\\.','.')
  if (!service.includes(':apiResource:')) {
    const [,namespace,name,version] = /^(.+)-([^-]+)-(v[0-9]+)\.json$/ .exec (path.basename(String(sources)))
    service = namespace.replace(/-/g,'.') + ':apiResource:' + name + ':' + version
  }

  const ordId = o.apiResourceOrdId = service
  delete o.services // otherwise we minify by ordID, which results in empty csn.definitions
  const from = String (sources)

  const csn = await getCsn(from, ordId);
  const [,namespace, name, version] = /^([^:]+):apiResource:([^:]+):(v[0-9]+)/.exec(ordId)
  return prepareCsn (csn, namespace + '.' + name + '.' + version, ordId)
}

async function getCsn(from, ordId) {
  if (/dp-metadata$/.test(from))
    return getDataProductCsnFromLocalRepo (from, 'eu10', 'stage-canary', ordId)
  else if(from === 'dp-cli')
    return getDataProductCsnViaDpCli(ordId)
  else
    return JSON.parse(await fs.readFile(from, { encoding: 'utf-8' }))
}
