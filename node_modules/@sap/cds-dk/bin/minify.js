#!/usr/bin/env node
const cds = require ('../lib/cds.js')
const { Minifier } = cds.minify;  if (!Minifier) throw new Error ('@sap/cds >= 9.4.0 required for this command')
const { Command } = require ('./util/cli.js')
const { inspect } = require ('node:util')

class Minify extends Command {

  options = Minify.options // for IntelliSense
  static options = {
    cleanse: { _excluding: 'keep' },
    keep: { _excluding: 'skip',
      aspect: false,
      entity: true,
      event: true,
      type: false,
      action: true,
      function: true,
    },
    skip: {},
    dry: false,
    debug: false,
    inspect: false,
  }
  static shortcuts = { skip:'x', dry:'y' }
  static filename = __filename

  parseArgs (conf) {
    let [sources,o] = super.parseArgs (conf)
    this.sources = sources.length ? o.from = sources : sources = o.from || '*'
    return [sources,o]
  }

  async exec ( args, options ) {
    let [sources,o] = this.parseArgs ({ args, options })
    try {
      let csn = await this.load (sources,o); this.csn = csn
      let min = await this.minify (csn,o); this.min = min
      if (o.dry) return
      if (o.inspect) return this.inspect (min,o)
      if (this.print) return this.print (min)
      else await this.export (min,o)
      console.log()
    } catch (e) {
      if (typeof e === 'string') return console.error (e)
      if (e.code) return console.error (e.message)
      else throw e
    }
  }

  /**
   * Subclasses override this method to provide custom loading behavior.
   */
  async load (sources,o) { // eslint-disable-line no-unused-vars
    return cds.load (sources)
  }

  /**
   * Subclasses override this method to provide custom cleansing behavior.
   */
  async cleanse (csn,o) { // eslint-disable-line no-unused-vars
    return csn
  }

  /**
   * Subclasses override this method to provide custom minification behavior.
   */
  async minify (csn,o) {
    let m = this.minifier ??= o.dry ? new Dryifier(csn) : new Minifier()
    csn = await this.cleanse (csn,o)
    return m.minify (csn,o)
  }

  /**
   * Subclasses override this method to generate exported artifacts.
   */
  export (csn,o) {} // eslint-disable-line no-unused-vars

  /**
   * Subclasses override this method to provide custom print behavior.
   */
  print (csn,o) { // eslint-disable-line no-unused-vars
    console.log (cds.compile.to.json (csn))
  }

  inspect (csn, {inspect:depth} = this.options) {
    const colors = cds.utils.colors.enabled
    console.log (inspect (cds.linked(csn), { depth, colors }))
  }
}


/**
 * Custom minifier to capture kept definitions in dry run mode
 */
class Dryifier extends Minifier {

  constructor(csn) { super(); this.all = Object.keys (csn.definitions) }
  capture = {}
  level = 0

  keep (each,d) {
    if (each in this.kept) return; else this.capture[each] = ++this.level
    super.keep (each, d)
    this.level--
  }

  minify (csn,o) {
    const { GREEN, GRAY, DIMMED, RESET } = cds.utils.colors
    const min = super.minify (csn, o)
    const kept = Object.keys(this.capture)
    console.log (RESET+'\n', 'Keep:', kept.length, '\n')
    for (let [ each, level ] of Object.entries(this.capture))
      console.log ('  '+GRAY,'â€¢'.repeat(level)+GREEN, each, RESET)
    console.log (RESET+'\n', 'Skip:', this.all.length - kept.length, '\n')
    for (let each of this.all)
      each in this.capture || console.log (DIMMED, '  -', each, RESET)
    console.log (RESET+'\n', 'Total:', this.all.length, '\n')
    return min
  }
}

module.exports = Object.assign (Minify._for_cds_dk(), { Minify })
