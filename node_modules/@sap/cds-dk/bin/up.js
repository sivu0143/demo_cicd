module.exports = Object.assign(up, {
  options: ['--to', '--namespace'],
  shortcuts: ['-2', '-n'],
  flags: [],
  help: `
# SYNOPSIS

  *cds up*

  Builds and deploys the application to Cloud Foundry or Kubernetes.

# OPTIONS

  *-2* | *--to* cf|k8s

    The platform to deploy to. Default is 'cf'.

  *-n* | *--namespace* <name>

    (Kubernetes only) Target namespace. If it does not yet exist it will be
    created automatically via *helm --create-namespace*.

# EXAMPLES

  *cds up*
  *cds up --to k8s*
  *cds up --to k8s --namespace e2e-tests*
`})

const { execSync } = require('node:child_process')
const cds = require('../lib/cds')
const { highlight } = require('../lib/util/term')
const { exists, fs, path, path: { join } } = cds.utils
const { readProject } = require('../lib/init/projectReader')

const run = cmd => {
  console.log(highlight(cmd))
  try {
    return execSync(cmd, {
      stdio: 'inherit',
      env: { ...process.env, FORCE_COLOR: cds.utils.colors.enabled }
    })
  } catch (error) {
    throw error.message
  }
}

async function up() {
  const project = readProject()
  const { apps, appName, hasApprouter, hasXsuaa, isMonorepoMicroservice } = project

  for (const { app } of apps) {
    const appPath = path.join(cds.root, cds.env.folders.app, app)
    if (exists(path.join(appPath, 'package.json')) && !exists(path.join(appPath, 'package-lock.json'))) {
      run(`npm i --prefix ${appPath}`)
    }
  }

  if (exists('mtx/sidecar') && !exists('mtx/sidecar/package-lock.json')) {
    run('npm i --package-lock-only --prefix mtx/sidecar')
  }

  const app = cds.env.folders.app
  const legacyToPreferred = {
    [join(app, 'router')]: '.deploy/app-router',
    [join(app, 'portal')]: '.deploy/portal',
    [join(app, 'html5-deployer')]: '.deploy/html5-deployer'
  }
  for (const [legacy, preferred] of Object.entries(legacyToPreferred)) {
    const root = exists(preferred) ? preferred : legacy
    if (exists(join(root, 'package.json')) && !exists(join(root, 'package-lock.json'))) {
      run(`npm i --package-lock-only --prefix ${root}`)
    }
  }

  if (cds.cli.options.to === 'k8s') {
    if (!exists('chart')) run('cds add helm')
    if (!exists('containerize.yaml')) run('cds add containerize')
  } else {
    if (!exists('mta.yaml')) {
      run('cds add mta')
    }
    if (!exists('package-lock.json')) {
      run('npm i --package-lock-only')
    }
  }

  if (isMonorepoMicroservice) {
    const { npmWorkspaceRoot } = project
    const source = path.join(npmWorkspaceRoot, 'package-lock.json')
    const target = path.join(process.cwd(), 'package-lock.json')
    if (exists(target) && fs.lstatSync(target).isSymbolicLink()) fs.unlinkSync(target)
    const relative = path.relative(process.cwd(), source)
    if (!exists(target)) fs.symlinkSync(relative, target, 'junction')
  }

  if (cds.cli.options.to === 'k8s') {
    const ns = cds.cli.options.namespace
    const nsHelm = ns ? `--namespace ${ns} --create-namespace` : ''
    const nsKubectl = ns ? `-n ${ns}` : ''

    run('npm i --package-lock')
    run('ctz containerize.yaml --log --push')
    let helmUpgrade = `helm upgrade --install ${appName} ./gen/chart ${nsHelm} --wait --wait-for-jobs --timeout=10m`
    if (hasXsuaa) helmUpgrade += ' --set-file xsuaa.jsonParameters=xs-security.json'
    run(helmUpgrade)
    run(`kubectl rollout status deployment ${appName}-srv ${nsKubectl} --timeout=8m`)
    if (hasApprouter) run(`kubectl rollout status deployment ${appName}-approuter ${nsKubectl} --timeout=8m`)
    if (exists('mtx/sidecar')) run(`kubectl rollout status deployment ${appName}-sidecar ${nsKubectl} --timeout=8m`)
  } else {
    run('mbt build -t gen --mtar mta.tar')
    const retries = process.env.CI ? '' : '--retries 0'
    run(`cf deploy gen/mta.tar -f ${retries}`)
  }
}
