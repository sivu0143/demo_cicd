module.exports = {
    IS_WIN: require('os').platform() === 'win32',

    COMMAND_INIT: 'init',
    COMMAND_ADD: 'add',

    JAVA_LTS_VERSIONS: [17, 21],
    MAVEN_ARCHETYPE_VERSION: '4.4.1',

    OPTIONS: Object.freeze({
        COMPLETION: 'completion',
        JAVA: 'java',
        JAVA_MVN: 'java:mvn',
        JAVA_PACKAGE: 'java:package',
        NODEJS: 'nodejs',
        ESM: 'esm',
        TYPER: 'typer',
        TYPESCRIPT: 'typescript',  // must run before SAMPLE, as that influences whether .js or .ts files are created
        EXTENSION: 'extension',
        MTA: 'mta',
        CF_MANIFEST: 'cf-manifest',
        HELM: 'helm',
        HELM_UNIFIED_RUNTIME: 'helm-unified-runtime',
        CONTAINERIZE: 'containerize',
        KYMA: 'kyma',
        SAMPLES: 'samples', // deprecated
        TINY_SAMPLE: 'tiny-sample',
        SAMPLE: 'sample',
        HANDLER: 'handler', // influenced by esm, typer and typescript
        TEST: 'test', // needs sample code
        XSUAA: 'xsuaa',
        IAS: 'ias',
        AMS: 'ams',
        HANA: 'hana',
        POSTGRES: 'postgres',
        SQLITE: 'sqlite',
        LIQUIBASE: 'liquibase',
        REDIS: 'redis',
        H2: 'h2',
        MULTITENANCY: 'multitenancy',
        TOGGLES: 'toggles',
        EXTENSIBILITY: 'extensibility',
        SIDE_BY_SIDE_EXTENSIBILITY: 'side-by-side-extensibility',
        MTX: 'mtx',
        APPROUTER: 'approuter',
        LOCAL_MESSAGING: 'local-messaging',
        FILE_BASED_MESSAGING: 'file-based-messaging',
        ENTERPRISE_MESSAGING: 'enterprise-messaging',
        ENTERPRISE_MESSAGING_SHARED: 'enterprise-messaging-shared',
        REDIS_MESSAGING: 'redis-messaging',
        KAFKA: 'kafka',
        ATTACHMENTS: 'attachments',
        MALWARE_SCANNER: 'malware-scanner',
        CONNECTIVITY: 'connectivity',
        DESTINATION: 'destination',
        HTML5_REPO: 'html5-repo',
        APP_FRONTEND: 'app-frontend',
        PORTAL: 'portal',
        APPLICATION_LOGGING: 'application-logging',
        CLOUD_LOGGING: 'cloud-logging',
        TELEMETRY: 'telemetry',
        AUDIT_LOGGING: 'audit-logging',
        NOTIFICATIONS: 'notifications',
        WORKZONE: 'workzone',
        WORKZONE_STANDARD: 'workzone-standard',
        UI5: 'ui5',
        DATA: 'data',
        HTTP: 'http',
        LINT: 'lint',
        LINT_DEV: 'lint:dev',
        PIPELINE: 'pipeline',
        GITHUB_ACTIONS: 'github-actions',
    }),

    REGEX_JAVA_PACKAGE: /^[a-z_][a-z0-9_]*(\.[a-z_][a-z0-9_]*)*$/g,
    // copied from mbt error message
    REGEX_JAVA_VERSION: /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$/,

    URLS: Object.freeze({
        PIPELINE_HELP: 'https://www.project-piper.io/',
        SAMPLES: 'https://github.com/capire/samples',
        CAPIRE: 'https://cap.cloud.sap',
        MAVEN_ARCHETYPE_HELP: `https://cap.cloud.sap/docs/java/developing-applications/building#the-maven-archetype`,
        MAVEN_INSTALL_HELP: `https://maven.apache.org/install.html`,
        CF_CLI: 'https://github.com/cloudfoundry/cli'
    }),

    PROJECT_FILES: ['package.json', 'pom.xml', '.cdsrc.json']
}
