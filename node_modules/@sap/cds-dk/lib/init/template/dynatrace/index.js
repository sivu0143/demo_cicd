const { merge, sort } = require('../../merge')

const { readProject } = require('../../projectReader')
const { srv4, mtxSidecar4 } = require('../../registries/mta')

module.exports = class extends require('../../plugin') {

  static hasInProduction(env) {
    return env.requires?.telemetry?.kind === 'to-dynatrace'
  }

  async canRun() {
    return true
  }

  async run() {
    const project = readProject()
    if (project.isNodejs) {
      project.profile ??= 'production'
      await merge(__dirname, 'files/package.json.hbs').into('package.json', { with: project })
      await sort('package.json', 'dependencies')
    }
  }

  async combine() {
    const project = readProject()
    const { appName, addMta, addHelm, addHelmUnifiedRuntime, isJava, addMultitenancy, srvPath } = project

    if (addMta || addMultitenancy) {
      const dynatrace = {
        in: 'resources',
        where: {
          type: 'org.cloudfoundry.managed-service',
          'parameters.service': 'dynatrace'
        }
      }
      const additions = [dynatrace], relationships = []
      if (addMta) {
        const srv = srv4(srvPath)
        additions.push(srv)
        relationships.push({
          insert: [dynatrace, 'name'],
          into: [srv, 'requires', 'name']
        })
      }
      if (addMultitenancy) {
        const mtxSidecar = mtxSidecar4(isJava ? 'mtx/sidecar' : 'gen/mtx/sidecar')
        additions.push(mtxSidecar)
        relationships.push({
          insert: [dynatrace, 'name'],
          into: [mtxSidecar, 'requires', 'name']
        })
      }
      project.uppercaseStrippedAppName = appName.replace(/-/g, '').toUpperCase().slice(0, 16),
      await merge(__dirname, 'files/mta.yaml.hbs').into('mta.yaml', {
        with: project, additions, relationships
      })
    }

    if (addHelm || addHelmUnifiedRuntime) {
      await merge(__dirname, 'files', 'values.yaml').into('chart/values.yaml')
    }
  }
}
