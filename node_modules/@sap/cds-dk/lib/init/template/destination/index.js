const { readProject } = require('../../projectReader')
const { merge } = require('../../merge')
const { srv4, approuter, destination, mtxSidecar4 } = require('../../registries/mta')

module.exports = class DestinationTemplate extends require('../../plugin') {

    static help() {
        return 'SAP BTP Destination Service'
    }

    static hasInProduction(env) {
        const kinds = { odata: 1, 'odata-v2': 1, 'odata-v4': 1, rest: 1 }
        const mtxServices = { 'cds.xt.SaasProvisioningService': 1, 'cds.xt.DeploymentService': 1, 'cds.xt.ModelProviderService': 1, 'cds.xt.ExtensibilityService': 1 }
        const _fromMtx = service => service in mtxServices
        const hasDestination = Object.entries(env.requires).some(([service, require]) => !_fromMtx(service) && !kinds[service] && kinds[require.kind])
        return hasDestination || !!env.requires.destinations
    }

    async run() {
        const project = readProject()
        const { configFile } = project
        await merge(__dirname, 'files', 'package.json.hbs').into(configFile, { with: project })
    }

    async combine() {
        const project = readProject()
        const { addHelm, addApprouter, addMultitenancy, addHelmUnifiedRuntime, addMta, hasMta, srvPath, isJava } = project

        if (addMultitenancy) {
            await merge({ cds: { requires: { destinations:true } } }).into('mtx/sidecar/package.json')
        }

        if (addMta || (addApprouter || addMultitenancy) && hasMta) {
            const srv = srv4(srvPath)
            const additions = [srv, destination]
            const relationships = [{
                insert: [destination, 'name'],
                into: [srv, 'requires', 'name']
            }]
            if (addApprouter) {
                relationships.push({
                    insert: [destination, 'name'],
                    into: [approuter, 'requires', 'name']
                })
            }
            if (addMultitenancy) {
                relationships.push({
                    insert: [destination, 'name'],
                    into: [mtxSidecar4(isJava ? 'mtx/sidecar' : 'gen/mtx/sidecar'), 'requires', 'name']
                })
            }
            await merge(__dirname, 'files/mta.yaml.hbs').into('mta.yaml', { with: project, additions, relationships })
        }

        if (addHelm || addHelmUnifiedRuntime) {
            await merge(__dirname, 'files/values.yaml').into('chart/values.yaml')
        }
    }
}
