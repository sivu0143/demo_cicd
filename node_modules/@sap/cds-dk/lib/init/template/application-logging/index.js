const { readProject } = require('../../projectReader')
const { merge } = require('../../merge')
const { srv4, mtxSidecar4, applicationLogging, approuter } = require('../../registries/mta')
const mvn = require('../../mvn')

module.exports = class ApplicationLoggingTemplate extends require('../../plugin') {

    static help() {
        return 'SAP BTP Application Logging Service'
    }

    static hasInProduction(env) {
        return !!env.requires?.['application-logging']
    }

    async canRun() {
        const { hasMta, hasHelm, hasHelmUnifiedRuntime } = readProject()
        if ((hasHelmUnifiedRuntime || hasHelm) && !hasMta) throw `'cds add application-logging' is not available for Kyma yet`
        return true
    }

    async run() {
        const project = readProject()
        const { isJava, configFile } = project
        await merge(__dirname, 'files/package.json.hbs').into(configFile, { with: project })
        if (isJava) await mvn.add('APPLICATION_LOGGING')
    }

    async combine() {
        const project = readProject()
        const { addMta, addApprouter, isJava, addMultitenancy, srvPath } = project

        if (addMta || addMultitenancy) {
            const additions = [], relationships = []
            if (addMta) {
                const srv = srv4(srvPath)
                additions.push(srv, applicationLogging)
                relationships.push({
                    insert: [applicationLogging, 'name'],
                    into: [srv, 'requires', 'name']
                })
            }
            if (addMultitenancy) {
                const mtxSidecar = mtxSidecar4(isJava ? 'mtx/sidecar' : 'gen/mtx/sidecar')
                additions.push(mtxSidecar)
                relationships.push({
                    insert: [applicationLogging, 'name'],
                    into: [mtxSidecar, 'requires', 'name']
                })
            }
            if (addApprouter) {
                additions.push(approuter)
                relationships.push({
                    insert: [applicationLogging, 'name'],
                    into: [approuter, 'requires', 'name']
                })
            }
            await merge(__dirname, 'files/mta.yaml.hbs').into('mta.yaml', {
                with: project, additions, relationships
            })
        }
    }
}
