const cds = require('../../../cds')
const { merge, sort } = require('../../merge')

const { readProject } = require('../../projectReader')
const { srv4, mtxSidecar4, approuter } = require('../../registries/mta')

module.exports = class extends require('../../plugin') {

  static hasInProduction(env) {
    return env.requires?.telemetry?.kind === 'to-cloud-logging' || env.requires['cloud-logging']
  }

  options() {
    return {
      'plan': {
        type: 'string',
        help: 'Specify the service plan.',
      },
      'with-telemetry': {
        type: 'boolean',
        help: 'Add telemetry capabilities.'
      }
    }
  }

  async run() {
    const project = readProject(), { isNodejs, isJava } = project
    project.withTelemetry = cds.cli.options['with-telemetry'] || project.hasTelemetry
    if (isNodejs) {
      project.profile ??= 'production'
      await merge(__dirname, 'files/package.json.hbs').into('package.json', { with: project })
      await sort('package.json', 'dependencies')
    } else if (isJava) {
      await merge(__dirname, 'files/java-cdsrc.json.hbs').into('.cdsrc.json', { with: project })
    }
  }

  async combine() {
    const project = readProject()
    const { hasMta, addMta, addHelm, addHelmUnifiedRuntime, addApprouter, isJava, addMultitenancy, srvPath } = project

    if (addMta || (addMultitenancy || addApprouter) && hasMta) {
      const cloudLogging = {
        in: 'resources',
        where: {
          type: 'org.cloudfoundry.managed-service',
          'parameters.service': 'cloud-logging'
        }
      }
      const additions = [cloudLogging], relationships = []
      const srv = srv4(srvPath)
      if (addMta) {
        additions.push(srv)
        relationships.push({
          insert: [cloudLogging, 'name'],
          into: [srv, 'requires', 'name']
        })
      }
      if (addMultitenancy) {
        const mtxSidecar = mtxSidecar4(isJava ? 'mtx/sidecar' : 'gen/mtx/sidecar')
        additions.push(mtxSidecar)
        relationships.push({
          insert: [cloudLogging, 'name'],
          into: [mtxSidecar, 'requires', 'name']
        })
      }
      if (addApprouter) {
        additions.push(approuter)
        relationships.push({
          insert: [cloudLogging, 'name'],
          into: [approuter, 'requires', 'name']
        })
      }

      project.cloudLoggingServicePlan = cds.cli.options['plan'] ?? 'standard'
      await merge(__dirname, 'files/mta.yaml.hbs').into('mta.yaml', {
        with: project, additions, relationships
      })
    }
    if (addHelm || addHelmUnifiedRuntime) {
      await merge(__dirname, 'files/values.yaml.hbs').into('chart/values.yaml')
    }
  }
}
