const path = require('node:path')
const { execSync } = require('node:child_process')
const { readProject } = require('../../projectReader')
const { renderAndCopy } = require('../../template')
const cds = require('../../../cds')
const { exists, copy } = cds.utils

module.exports = class GitHubActionTemplate extends require('../../plugin') {

  static hasInProduction() {
    return exists('.github/workflows/test.yaml')
  }

  options() {
    return {
      'sap': {
        type: 'boolean'
      }
    }
  }

  static help() {
    return 'CI/CD pipeline via GitHub Actions'
  }

  async run() {
    const test = `.github/workflows/test.yaml`
    if (!exists(test) || cds.cli.options.force) {
      await renderAndCopy(path.join(__dirname, 'files/workflows/test.yaml.hbs'), test, { sap: cds.cli.options.sap })
    } else {
      console.log('> skipping ' + test)
    }

    const release = `.github/workflows/release.yaml`
    if (!exists(release) || cds.cli.options.force) {

      let githubSlug
      try {
          githubSlug = execSync('git remote get-url origin', { stdio: 'pipe' }).toString().split('/').slice(-2).join('/').trim().replace(/\.git$/, '')
      } catch (error) {
        githubSlug = '<org/repo>'
        // console.log(`\ncould not determine GitHub URL for the project â€“ replace '<org/repo>' in ${release}`, DEBUG ? error : '')
      }
      const { hasMta, hasHelm } = readProject()
      await renderAndCopy(path.join(__dirname, 'files/workflows/release.yaml.hbs'), release, { sap: cds.cli.options.sap, githubSlug, hasMta, hasHelm })
    } else {
      console.log('> skipping ' + release)
    }
  }

  async combine() {
    const project = readProject()
    const { addMta, addHelm } = project, { force } = cds.cli.options
    project.sap = cds.cli.options.sap
    if (addMta) {
      const cf = '.github/workflows/cf.yaml'
      if (force || !exists(cf)) {
        await renderAndCopy(path.join(__dirname, 'files/workflows/cf.yaml.hbs'), cf, project)
      }
      const cfSetup = '.github/actions/cf-setup'
      if (force || !exists(cfSetup)) {
        await copy(path.join(__dirname, 'files/cf-setup'), cfSetup)
      }
    }
    if (addHelm) {
      const kyma = '.github/workflows/kyma.yaml'
      if (force || !exists(kyma)) {
        await renderAndCopy(path.join(__dirname, 'files/workflows/kyma.yaml.hbs'), kyma, project)
      }
      const kymaSetup = '.github/actions/kyma-setup'
      if (force || !exists(kymaSetup)) {
        await copy(path.join(__dirname, 'files/kyma-setup'), kymaSetup)
      }

      const kymaInfo = '.github/actions/kyma-info'
      if (force || !exists(kymaInfo)) {
        await copy(path.join(__dirname, 'files/kyma-info'), kymaInfo)
      }
    }
  }
}
