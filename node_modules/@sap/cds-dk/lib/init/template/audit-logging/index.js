const { join } = require('path')
const cds = require('../../../cds')
const { readProject } = require('../../projectReader')
const { merge } = require('../../merge')
const { srv4, auditlog } = require('../../registries/mta')
const mvn = require('../../mvn')

module.exports = class AuditLoggingTemplate extends require('../../plugin') {

  static help() {
   return 'SAP BTP Audit Logging Service'
  }

  static hasInProduction(env) {
    return env.requires?.['audit-log'] || readProject().dependencies?.['@cap-js/audit-logging']
  }

  options() {
    return {
      'plan': {
        type: 'string',
        help: 'Specify the service plan.',
      }
    }
  }

  async run() {
    const project = readProject()
    const { configFile, isJava } = project
    await merge(join(__dirname, 'files/package.json.hbs')).into(configFile, { with: project })
    if (isJava) await mvn.add('audit_logging')
  }

  async combine() {
    const project = readProject()
    const { addMta, addHelm, addMultitenancy, srvPath } = project
    const { plan = 'premium' } = cds.cli.options
    project.servicePlan = plan

    if (addMultitenancy) {
      await merge(__dirname, 'files/package.sidecar.json').into('mtx/sidecar/package.json')
    }

    if (addMta) {
      const srv = srv4(srvPath)
      await merge(join(__dirname, 'files/mta.yaml.hbs')).into('mta.yaml', {
        with: project,
        additions: [srv, auditlog],
        relationships: [{
            insert: [auditlog, 'name'],
            into: [srv, 'requires', 'name']
          }
        ]
      })
    }
    if (addHelm) {
      await merge({
        srv: { bindings: { auditlog: { serviceInstanceName: 'auditlog' }}},
        auditlog: {
          serviceOfferingName: 'auditlog',
          servicePlanName: plan
        }
      }).into('chart/values.yaml')
    }
  }
}
