'use strict';


const logger = require('./logger.js');
const async = require('async');
const DeployTask = require('./tasks.js');
const {Container} = require('@sap/hdi');
const {enrich_credentials_with_session_variables} = require('./client-info');
const {prepareCredentials} = require('./utils');

const deployId = process.env.DEPLOY_ID || 'Deployment ID: none';

// deploy hdi content
exports.deploy = function (options, creds, content, cb) {
  const hdiCreds = enrich_credentials_with_session_variables(prepareCredentials(creds, options, logger));
  const schema = `${creds.schema}#DI`;
  const is_hdb_client = logger.getClientValue() === logger.hdb;
  const container = new Container(creds.schema, hdiCreds, schema, is_hdb_client);

  const deployTask = new DeployTask(container, hdiCreds, content, options, logger, creds.schema);

  const preDeployTasks = [
    ...deployTask.preprocessing(),
    ...deployTask.connect(),
    ...deployTask.lock()
  ];

  let deployTasks = [];
  if (options.deltaDetection === false) {
    if (options.treatUnmodifiedAsModified || options.includeFilter.valid || options.optimiseFileUpload) {
      logger.warn('--optimise-file-upload, --include-filter, and --treat-unmodified-as-modified will be ignored when used with the --no-delta-detection option.');
    }
    deployTasks = [
      ...deployTask.make()
    ];
  } else if (options.optimiseFileUpload) {
    deployTasks = [
      ...deployTask.optimiseSynchronize(),
      ...deployTask.optimiseMake()
    ];
  } else {
    deployTasks = [
      ...deployTask.synchronize(),
      ...deployTask.make()
    ];
  }

  const postDeployTasks = [
    ...deployTask.deploy(),
    ...deployTask.unlock()
  ];

  const tasks = [
    ...preDeployTasks,
    ...deployTasks,
    ...postDeployTasks
  ];

  async.series(tasks, function (err, results) {
    if (err) {
      // err.message.replace: delete line breaks
      const message = err.message ? String(err.message) : `${err}`;
      logger.setDeploymentStatus('failed');
      logger.error('Deployment to container %s failed - error: %s [%s].', creds.schema, message.replace(/(\r\n|\n|\r)/gm, ''), deployId);
    } else {
      logger.setDeploymentStatus('success');
      logger.log('Deployment to container %s done [%s].', creds.schema, deployId);
    }

    // as last action, close the client
    deployTask.disconnect();
    cb(err, {
      task: 'deploy',
      results: results
    });
  });
};
