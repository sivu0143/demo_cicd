var filter = require('./filter');
var VError = require('verror');
var fs = require('fs');
var debug = require('debug')('cf-services');

exports.readCFServices = readCFServices;
exports.filterCFServices = filterCFServices;

function readCFServices() {
  let services;

  // Check if VCAP_SERVICES_FILE_PATH is set
  const filePath = process.env.VCAP_SERVICES_FILE_PATH;
  if (filePath) {
    try {
      const fileContent = fs.readFileSync(filePath, 'utf8');
      services = JSON.parse(fileContent);
      debug(`Successfully read services from file: ${filePath}`);
    } catch (err) {
      throw new VError(err, `Failed to read or parse file specified by VCAP_SERVICES_FILE_PATH: ${filePath}`);
    }
  } else if (process.env.VCAP_SERVICES) {
    // Fallback to VCAP_SERVICES environment variable
    try {
      services = JSON.parse(process.env.VCAP_SERVICES);
      debug('Successfully read services from VCAP_SERVICES environment variable');
    } catch (err) {
      throw new VError(err, 'Environment variable VCAP_SERVICES is not a valid JSON string.');
    }
  } else {
    // Neither VCAP_SERVICES_FILE_PATH nor VCAP_SERVICES is set
    debug('Neither VCAP_SERVICES_FILE_PATH nor VCAP_SERVICES is set.');
    return;
  }

  // Process and return the services
  const result = {};
  for (const s in services) {
    for (const si in services[s]) {
      const svc = services[s][si];
      result[svc.name] = svc; // name is the service instance id
    }
  }
  return result;
}

/**
 * Returns an array of Cloud Foundry services matching the given filter.
 *
 * @param filterQuery {(string|Object|function)}
 *  - if string, returns the service with the same service instance name (name property)
 *  - if Object, should have some of these properties [name, label, tag, plan] and returns all services
 *    where all of the given properties match. Given tag matches if it is present in the tags array.
 *  - if function, should take a service object as argument and return true only if it matches the filter
 * @returns Arrays of matching service objects, empty if no matches
 */
function filterCFServices(filterQuery) {
  return filter.apply(readCFServices(), filterQuery);
}
